1Ô∏è‚É£ Stealth-First Content Discovery: Hidden Files, Directories & Endpoints
üí¨ Prompt:
"Draft a structured approach to content discovery for web applications that balances stealth and depth. Include:

passive intelligence gathering (Wayback Machine, Common Crawl, Github Dorks),

active brute-force techniques (ffuf, dirsearch, feroxbuster) with tuned wordlists,

DNS subdomain brute-forcing and permutation scanning,

recursive path expansion (/dev/, /test/, /api/v1/, /v2/),

handling wildcard DNS poisoning,

directory indexing and misconfigured .git, .svn, .env exposures,

and post-discovery validation techniques (fingerprinting & endpoint confirmation)."

2Ô∏è‚É£ API Endpoint Discovery & Enumeration
üí¨ Prompt:
"Describe an end-to-end methodology for discovering hidden and undocumented API endpoints during a penetration test. Include:

leveraging JavaScript parsing for hardcoded URLs,

reverse engineering mobile app traffic (Burp Suite + Frida + Objection),

fuzzing common API naming conventions (/api/v1/, /internal/, /admin/),

automated endpoint discovery using LinkFinder, jsfinder, or subjs,

exploring OpenAPI/Swagger descriptors for documented but undisclosed endpoints,

and testing endpoint behaviors for information leakage, verbose error messages, and improper authentication enforcement."

3Ô∏è‚É£ Content Discovery Under Strong Security Headers (CSP, HSTS)
üí¨ Prompt:
"Outline techniques for performing effective content discovery on web applications fortified with CSP and HSTS headers, including:

using HTTPS wordlist brute-force tools (ffuf, feroxbuster with -k and -H options for HSTS bypass attempts),

leveraging browser debug consoles to spot blocked resource patterns via CSP violation reports,

inspecting JavaScript stack traces for hidden file paths,

fingerprinting content distribution networks (CDNs) to spot asset routing and indirect discovery vectors,

and using DNS zone transfers or misconfigured subdomains to sidestep CSP altogether."

4Ô∏è‚É£ Business Logic Flaws in APIs: Discovery & Exploitation
üí¨ Prompt:
"Design a methodology to identify and exploit business logic vulnerabilities in APIs, including:

bypassing parameter validation via sequence manipulation,

testing state-dependent workflows out-of-order (e.g. skip payment but process order),

using fuzzed values and incorrect object relationships (user_id, order_id) to trigger logic misbehaviors,

mass action enumeration (e.g., applying discounts to unintended targets),

and automating logic flow mutations using Burp Suite macros, custom scripts, or tools like autorepeater."

5Ô∏è‚É£ REST API Security Testing Methodology
üí¨ Prompt:
"Develop a tactical checklist and toolset for testing REST APIs, focusing on:

Broken Authentication: session fixation, weak JWT secrets, token leakage, expired token reuse.

Broken Authorization: horizontal privilege escalation, vertical privilege escalation, BOLA (Broken Object Level Authorization).

Rate Limiting Bypass: token bucket abuse, IP rotation, X-Forwarded-For manipulation.

Injection Attacks: JSON/XML/GraphQL injection, SQLi, NoSQLi.

and using tools like: Postman, Burp Suite, Autorize, JWT Tool, crlfuzz."

6Ô∏è‚É£ GraphQL API Security Testing: Full Exploit Surface
üí¨ Prompt:
"Explain a systematic approach for penetration testing GraphQL APIs. Cover:

Introspection abuse for schema enumeration,

Over-fetching queries to bypass access control and leak unrelated data,

Mass assignment attacks through input object mutation,

Rate-limiting bypass by query obfuscation or batched mutations,

Input-based injection via crafted GraphQL queries,

and use of specialized tools: InQL, GraphQLmap, Burp GraphQL Raider."

7Ô∏è‚É£ Practical Guide to ffuf & dirsearch for Hidden Resource Hunting
üí¨ Prompt:
"Provide a hands-on guide for using ffuf and dirsearch to uncover hidden resources in web applications. Explain:

difference in threading behavior and rate control,

optimal wordlist selection based on target tech stack,

HTTP response code filtering and anomaly spotting,

recursive directory fuzzing for deep discovery,

handling wildcard and soft 404s,

and chaining ffuf or dirsearch outputs into downstream attack scripts."

üí¨ Prompt:
"After identifying hidden endpoints with ffuf or dirsearch, automate follow-up vulnerability probes against each one for:

Open Redirects,

XSS,

IDOR,

SSRF,

and Logic Flaws.
Propose a bash/Python pipeline integrating ffuf, gau, nuclei, and httpx."
